import streamlit as st
import pandas as pd
import numpy as np
import pickle
import sklearn
import interpret
import warnings
import plotly.graph_objects as go

# Í≤ΩÍ≥† Î©îÏãúÏßÄ Î¨¥Ïãú
warnings.filterwarnings('ignore')

# --- 0. ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï ---
st.set_page_config(
    page_title="ÎßåÏÑ±ÏΩ©Ìå•Î≥ë ÏúÑÌóò ÏòàÏ∏°",
    layout="wide",
    page_icon="ü©∫",
    initial_sidebar_state="expanded"
)

# --- 1. ÌïôÏäµÎêú Î™®Îç∏ Î∞è Îç∞Ïù¥ÌÑ∞ Ïª¨Îüº Î∂àÎü¨Ïò§Í∏∞ ---
@st.cache_resource
def load_model():
    """Ï∫êÏãúÎ•º Ïù¥Ïö©Ìï¥ Î™®Îç∏ÏùÑ ÌïúÎ≤àÎßå Î°úÎìúÌï©ÎãàÎã§."""
    try:
        with open("stacking_model.pkl", "rb") as f:
            model = pickle.load(f)
        return model
    except FileNotFoundError:
        st.error("'stacking_model.pkl' ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. app.pyÏôÄ Í∞ôÏùÄ Ìè¥ÎçîÏóê ÏûàÎäîÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
        return None

model = load_model()

# ‚òÖ‚òÖ‚òÖ Ï§ëÏöî: ÌïôÏäµÏóê ÏÇ¨Ïö©Îêú Î™®Îì† Ïª¨Îüº ÏàúÏÑú Í∑∏ÎåÄÎ°ú Ï†ïÏùò ‚òÖ‚òÖ‚òÖ
MODEL_COLUMNS = [
    "age", "sex", "edu", "HE_BMI", "HE_wc", "HE_sbp", "HE_dbp", "HE_glu",
    "HE_HbA1c", "HE_chol", "HE_TG", "HE_HDL_st2", "HE_ast", "HE_alt",
    "HE_HB", "HE_Upro", "HE_Ubld", "HE_BUN", "DI1_dg", "DE1_dg",
    "DI2_dg", "sm_presnt", "HE_HPfh1", "HE_HPfh2", "HE_HPfh3",
    "HE_DMfh1", "HE_DMfh2", "HE_DMfh3", 'BUN_Creatinine_Ratio', 'Pulse_Pressure'
]

# --- 2. ÌôîÎ©¥ Íµ¨ÏÑ± ---
st.title("ü©∫ Ïà®Í≤®ÏßÑ ÎßåÏÑ±ÏΩ©Ìå•Î≥ë(Ï¥àÍ∏∞ ÏïåÎ∂ÄÎØºÎá®) ÏúÑÌóò ÏòàÏ∏°")
st.markdown("Í±¥Í∞ïÍ≤ÄÏßÑ Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤¥Î•º ÏûÖÎ†•ÌïòÏó¨ eGFR ÏàòÏπòÍ∞Ä Ï†ïÏÉÅÏù¥ÎçîÎùºÎèÑ ÎÇòÌÉÄÎÇ† Ïàò ÏûàÎäî **Ï¥àÍ∏∞ ÎßåÏÑ±ÏΩ©Ìå•Î≥ë(ÏïåÎ∂ÄÎØºÎá®)Ïùò ÏúÑÌóòÎèÑÎ•º ÏòàÏ∏°**Ìï©ÎãàÎã§.")

# ÏÇ¨Ïù¥ÎìúÎ∞îÏóê ÏûÖÎ†• Ìèº Íµ¨ÏÑ±
with st.sidebar:
    st.header("ÌôòÏûê Ï†ïÎ≥¥ ÏûÖÎ†•")
    
    with st.expander("Í∏∞Î≥∏ Ï†ïÎ≥¥", expanded=True):
        age = st.number_input("ÎÇòÏù¥ (ÏÑ∏)", min_value=19, max_value=100, value=55)
        sex = st.selectbox("ÏÑ±Î≥Ñ", options=[1, 2], format_func=lambda x: "ÎÇ®ÏÑ±" if x==1 else "Ïó¨ÏÑ±")
        edu = st.selectbox("ÍµêÏú° ÏàòÏ§Ä", options=[1, 2, 3, 4], index=2, format_func=lambda x: {1:'Ï¥àÏ°∏Ïù¥Ìïò', 2:'Ï§ëÏ°∏', 3:'Í≥†Ï°∏', 4:'ÎåÄÏ°∏Ïù¥ÏÉÅ'}[x])
        
        # --- ‚òÖ‚òÖ‚òÖ Ìù°Ïó∞ Ïò§Î•ò ÏàòÏ†ï: ÎÖºÎ¶¨Ï†Å ÏàúÏÑú(3>2>1)Î°ú Í∞íÏùÑ Ïû¨ÏÑ§Ï†ïÌïòÍ≥†, Í∏∞Î≥∏Í∞íÏùÑ 'ÎπÑÌù°Ïó∞'ÏúºÎ°ú Î≥ÄÍ≤Ω ‚òÖ‚òÖ‚òÖ ---
        sm_presnt_options = {3: 'Îß§Ïùº', 2: 'Í∞ÄÎÅî', 1: 'ÎπÑÌù°Ïó∞'}
        sm_presnt = st.selectbox("ÌòÑÏû¨ Ìù°Ïó∞ Ïó¨Î∂Ä", options=sm_presnt_options.keys(), index=2, format_func=lambda x: sm_presnt_options[x])

    with st.expander("Ïã†Ï≤¥ Í≥ÑÏ∏°", expanded=True):
        HE_BMI = st.number_input("BMI (kg/m¬≤)", min_value=10.0, max_value=50.0, value=24.0, step=0.1)
        HE_wc = st.number_input("ÌóàÎ¶¨ ÎëòÎ†à (cm)", min_value=40.0, max_value=200.0, value=85.0)
        HE_sbp = st.number_input("ÏàòÏ∂ïÍ∏∞ ÌòàÏïï (mmHg)", min_value=50, max_value=250, value=120)
        HE_dbp = st.number_input("Ïù¥ÏôÑÍ∏∞ ÌòàÏïï (mmHg)", min_value=30, max_value=150, value=80)

    with st.expander("ÌòàÏï° Í≤ÄÏÇ¨ Í≤∞Í≥º"):
        HE_crea = st.number_input("ÌòàÏ§ë ÌÅ¨Î†àÏïÑÌã∞Îãå (mg/dL)", min_value=0.1, max_value=20.0, value=0.9, step=0.1, help="ÌååÏÉùÎ≥ÄÏàò Í≥ÑÏÇ∞ÏóêÎßå ÏÇ¨Ïö©Îê©ÎãàÎã§.")
        HE_glu = st.number_input("Í≥µÎ≥µ ÌòàÎãπ (mg/dL)", min_value=50, max_value=500, value=95)
        HE_HbA1c = st.number_input("ÎãπÌôîÌòàÏÉâÏÜå (%)", min_value=3.0, max_value=20.0, value=5.5, step=0.1)
        HE_chol = st.number_input("Ï¥ù ÏΩúÎ†àÏä§ÌÖåÎ°§ (mg/dL)", min_value=50, max_value=500, value=190)
        HE_TG = st.number_input("Ï§ëÏÑ±ÏßÄÎ∞© (mg/dL)", min_value=20, max_value=1000, value=130)
        HE_HDL_st2 = st.number_input("HDL ÏΩúÎ†àÏä§ÌÖåÎ°§ (mg/dL)", min_value=10, max_value=150, value=50)
        HE_ast = st.number_input("AST (U/L)", min_value=5, max_value=500, value=25)
        HE_alt = st.number_input("ALT (U/L)", min_value=5, max_value=500, value=25)
        HE_HB = st.number_input("ÌòàÏÉâÏÜå (g/dL)", min_value=5.0, max_value=25.0, value=14.0, step=0.1)
        HE_BUN = st.number_input("ÌòàÏ§ë ÏöîÏÜåÏßàÏÜå (BUN, mg/dL)", min_value=1.0, max_value=100.0, value=15.0, step=0.1)

    with st.expander("ÏÜåÎ≥Ä Í≤ÄÏÇ¨ Í≤∞Í≥º"):
        HE_Upro = st.selectbox("ÏöîÎã®Î∞± Í≤ÄÏÇ¨", options=[1, 2, 3, 4, 5], index=0, format_func=lambda x: f"{x}Îã®Í≥Ñ", help="1(-), 2(+-), 3(+1), 4(+2), 5(‚â•+3)")
        HE_Ubld = st.selectbox("ÏöîÏû†Ìòà Í≤ÄÏÇ¨", options=[1, 2, 3, 4, 5], index=0, format_func=lambda x: f"{x}Îã®Í≥Ñ", help="1(-), 2(+-), 3(+1), 4(+2), 5(‚â•+3)")

    with st.expander("Î≥ëÎ†• Î∞è Í∞ÄÏ°±Î†•"):
        # --- ‚òÖ‚òÖ‚òÖ Ïò§Î•ò ÏàòÏ†ï: optionsÎ•º [1, 0]ÏúºÎ°ú Î≥ÄÍ≤ΩÌïòÍ≥†, Í∏∞Î≥∏Í∞íÏùÑ index=1(ÏïÑÎãàÏò§)Î°ú ÏÑ§Ï†ï ‚òÖ‚òÖ‚òÖ ---
        DI1_dg = st.selectbox("Í≥†ÌòàÏïï ÏùòÏÇ¨ÏßÑÎã® Ïó¨Î∂Ä", options=[1, 0], index=1, format_func=lambda x: "Ïòà" if x==1 else "ÏïÑÎãàÏò§")
        DE1_dg = st.selectbox("Ïù¥ÏÉÅÏßÄÏßàÌòàÏ¶ù ÏùòÏÇ¨ÏßÑÎã® Ïó¨Î∂Ä", options=[1, 0], index=1, format_func=lambda x: "Ïòà" if x==1 else "ÏïÑÎãàÏò§")
        DI2_dg = st.selectbox("ÎáåÏ°∏Ï§ë ÏùòÏÇ¨ÏßÑÎã® Ïó¨Î∂Ä", options=[1, 0], index=1, format_func=lambda x: "Ïòà" if x==1 else "ÏïÑÎãàÏò§")
        st.write("---")
        st.write("Í≥†ÌòàÏïï Í∞ÄÏ°±Î†•")
        HE_HPfh1 = st.selectbox(" (Î∂Ä)", options=[1, 0], index=1, format_func=lambda x: "Ïòà" if x==1 else "ÏïÑÎãàÏò§", key='hp_father')
        HE_HPfh2 = st.selectbox(" (Î™®)", options=[1, 0], index=1, format_func=lambda x: "Ïòà" if x==1 else "ÏïÑÎãàÏò§", key='hp_mother')
        HE_HPfh3 = st.selectbox(" (ÌòïÏ†úÏûêÎß§)", options=[1, 0], index=1, format_func=lambda x: "Ïòà" if x==1 else "ÏïÑÎãàÏò§", key='hp_sibling')
        st.write("---")
        st.write("ÎãπÎá®Î≥ë Í∞ÄÏ°±Î†•")
        HE_DMfh1 = st.selectbox(" (Î∂Ä)", options=[1, 0], index=1, format_func=lambda x: "Ïòà" if x==1 else "ÏïÑÎãàÏò§", key='dm_father')
        HE_DMfh2 = st.selectbox(" (Î™®)", options=[1, 0], index=1, format_func=lambda x: "Ïòà" if x==1 else "ÏïÑÎãàÏò§", key='dm_mother')
        HE_DMfh3 = st.selectbox(" (ÌòïÏ†úÏûêÎß§)", options=[1, 0], index=1, format_func=lambda x: "Ïòà" if x==1 else "ÏïÑÎãàÏò§", key='dm_sibling')

# --- 3. ÏòàÏ∏° Î°úÏßÅ ---
if model:
    # ÌååÏÉù Î≥ÄÏàò Í≥ÑÏÇ∞
    Pulse_Pressure = HE_sbp - HE_dbp
    BUN_Creatinine_Ratio = HE_BUN / (HE_crea + 1e-6)

    # ÏòàÏ∏°Ïö© Îç∞Ïù¥ÌÑ∞ÌîÑÎ†àÏûÑ ÏÉùÏÑ± (Î™®Îì† Í∞íÏùÑ ÏÇ¨Ïö©Ïûê ÏûÖÎ†•ÏúºÎ°ú Î∞õÏùå)
    input_data = {
        'age': age, 'sex': sex, 'edu': edu, 'HE_BMI': HE_BMI, 'HE_wc': HE_wc,
        'HE_sbp': HE_sbp, 'HE_dbp': HE_dbp, 'HE_glu': HE_glu, 'HE_HbA1c': HE_HbA1c,
        'HE_chol': HE_chol, 'HE_TG': HE_TG, 'HE_HDL_st2': HE_HDL_st2, 'HE_ast': HE_ast,
        'HE_alt': HE_alt, 'HE_HB': HE_HB, 'HE_Upro': HE_Upro, 'HE_Ubld': HE_Ubld,
        'HE_BUN': HE_BUN, 'DI1_dg': DI1_dg, 'DE1_dg': DE1_dg, 'DI2_dg': DI2_dg,
        'sm_presnt': sm_presnt, 'HE_HPfh1': HE_HPfh1, 'HE_HPfh2': HE_HPfh2,
        'HE_HPfh3': HE_HPfh3, 'HE_DMfh1': HE_DMfh1, 'HE_DMfh2': HE_DMfh2,
        'HE_DMfh3': HE_DMfh3, 'Pulse_Pressure': Pulse_Pressure,
        'BUN_Creatinine_Ratio': BUN_Creatinine_Ratio
    }
    X_new = pd.DataFrame([input_data])[MODEL_COLUMNS]

    # ÏòàÏ∏°
    pred_prob = model.predict_proba(X_new)[:, 1][0]

    # --- 4. Í≤∞Í≥º ÏãúÍ∞ÅÌôî ---
    col1, col2 = st.columns([1, 2])
    with col1:
        st.subheader("ÏòàÏ∏° Í≤∞Í≥º")
        
        # ÏúÑÌóòÎèÑ Í≤åÏù¥ÏßÄ Ï∞®Ìä∏
        fig_gauge = go.Figure(go.Indicator(
            mode = "gauge+number", value = pred_prob * 100,
            domain = {'x': [0, 1], 'y': [0, 1]},
            title = {'text': "ÏúÑÌóòÎèÑ", 'font': {'size': 24}},
            gauge = {
                'axis': {'range': [None, 100]},
                'steps' : [
                    {'range': [0, 20], 'color': 'lightgreen'},
                    {'range': [20, 50], 'color': 'yellow'},
                    {'range': [50, 100], 'color': 'red'}],
                'threshold' : {'line': {'color': "black", 'width': 4}, 'thickness': 0.75, 'value': 50}
            }))
        fig_gauge.update_layout(height=300, margin=dict(l=10, r=10, t=40, b=10))
        st.plotly_chart(fig_gauge, use_container_width=True)

    with col2:
        st.subheader("Í≤∞Í≥º Ìï¥ÏÑù")
        st.info("""
        Ïù¥ ÏòàÏ∏°Í∞íÏùÄ eGFR ÏàòÏπòÍ∞Ä Ï†ïÏÉÅÏù¥ÎçîÎùºÎèÑ Ïà®Í≤®Ï†∏ ÏûàÏùÑ Ïàò ÏûàÎäî **Ï¥àÍ∏∞ ÏïåÎ∂ÄÎØºÎá®Ïùò ÏúÑÌóòÎèÑ**Î•º ÎÇòÌÉÄÎÉÖÎãàÎã§.
        - **ÎÜíÏùÄ ÏúÑÌóò (50% Ïù¥ÏÉÅ)**: Ï†ÑÎ¨∏ÏùòÏôÄ ÏÉÅÎã¥ÌïòÏó¨ Ï†ïÎ∞Ä ÏïåÎ∂ÄÎØºÎá®(ACR) Í≤ÄÏÇ¨Î•º Î∞õÏïÑÎ≥¥ÏãúÎäî Í≤ÉÏùÑ Í∞ïÎ†•Ìûà Í∂åÏû•Ìï©ÎãàÎã§.
        - **Ï£ºÏùò ÌïÑÏöî (20% ~ 50%)**: ÏÉùÌôú ÏäµÍ¥Ä Í∞úÏÑ†(ÏãùÎã® Ï°∞Ï†à, Ïö¥Îèô)ÏùÑ ÏãúÏûëÌïòÍ≥†, Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Í±¥Í∞ï ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÎäî Í≤ÉÏù¥ Ï¢ãÏäµÎãàÎã§.
        - **ÎÇÆÏùÄ ÏúÑÌóò (20% ÎØ∏Îßå)**: ÌòÑÏû¨ ÏúÑÌóòÎèÑÎäî ÎÇÆÏßÄÎßå, Íæ∏Ï§ÄÌïú Í±¥Í∞ï Í¥ÄÎ¶¨Í∞Ä Ï§ëÏöîÌï©ÎãàÎã§.
        
        **‚Äª Î≥∏ ÏòàÏ∏° Í≤∞Í≥ºÎäî Ï∞∏Í≥†Ïö©Ïù¥Î©∞, ÏùòÌïôÏ†Å ÏßÑÎã®ÏùÑ ÎåÄÏ≤¥Ìï† Ïàò ÏóÜÏäµÎãàÎã§.**
        """, icon="‚ÑπÔ∏è")

    # --- 5. Î™®Îç∏ ÏòàÏ∏° Í∑ºÍ±∞ ÌôïÏù∏ (EBM) ---
    st.markdown("---")
    st.subheader("Î™®Îç∏ ÏòàÏ∏° Í∑ºÍ±∞ ÌôïÏù∏ (EBM Ìè≠Ìè¨ Ï∞®Ìä∏)")

    try:
        trained_ebm_in_stack = model.named_estimators_['ebm']
        ebm_local = trained_ebm_in_stack.explain_local(X_new, [int(pred_prob > 0.5)])
        
        explanation_data = ebm_local.data(0)
        df_exp = pd.DataFrame({
            'Feature': explanation_data['names'] + ['Intercept'],
            'Contribution': list(explanation_data['scores']) + [explanation_data['extra']['scores'][0]]
        }).sort_values('Contribution', key=abs, ascending=False)

        # ÏòàÏ∏° Í∑ºÍ±∞ Ìè≠Ìè¨ Ï∞®Ìä∏
        fig_waterfall = go.Figure(go.Waterfall(
            name = "Contribution", orientation = "h",
            measure = ["relative"] * (len(df_exp) - 1) + ["total"],
            y = df_exp['Feature'], x = df_exp['Contribution'],
            connector = {"line":{"color":"rgb(63, 63, 63)"}},
        ))
        fig_waterfall.update_layout(title="Í∞Å Î≥ÄÏàòÍ∞Ä ÏòàÏ∏°Ïóê ÎØ∏Ïπú ÏòÅÌñ•", yaxis_title="Î≥ÄÏàò", height=500)
        st.plotly_chart(fig_waterfall, use_container_width=True)

    except Exception as e:
        st.error(f"EBM ÏÑ§Î™ÖÏùÑ ÌëúÏãúÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e}")

# --- 6. Ï∂îÍ∞Ä Ï†ïÎ≥¥ (Ìëú) ---
st.markdown("---")
tab1, tab2 = st.tabs(["üéØ Î™®Îç∏ ÏÑ±Îä• ÏöîÏïΩ", "üìñ Ï£ºÏöî ÏùòÌïôÏö©Ïñ¥ ÏÑ§Î™Ö"])

with tab1:
    st.subheader("EBM+LR Stacking Î™®Îç∏ ÏÑ±Îä• ÏöîÏïΩ")
    st.table(pd.DataFrame({
        'ÏÑ±Îä• ÏßÄÌëú': ['Ï†ïÌôïÎèÑ (Accuracy)', 'ÌôòÏûê Î∞úÍ≤¨Ïú® (Sensitivity)', 'Ï†ïÏÉÅÏù∏ ÌåêÎ≥ÑÏú® (Specificity)', 'AUC'],
        'ÏÑ§Î™Ö': ['Ï†ÑÏ≤¥ ÏòàÏ∏°Ïù¥ ÏñºÎßàÎÇò Ï†ïÌôïÌïúÍ∞Ä', 'Ïã§Ï†ú ÏúÑÌóòÍµ∞ÏùÑ ÏñºÎßàÎÇò Ïûò Ï∞æÏïÑÎÇ¥ÎäîÍ∞Ä', 'Ïã§Ï†ú Ï†ïÏÉÅÏù∏ÏùÑ ÏñºÎßàÎÇò Ïûò Í∞ÄÎ†§ÎÇ¥ÎäîÍ∞Ä', 'Î™®Îç∏Ïùò Ï†ÑÎ∞òÏ†ÅÏù∏ Î≥ÄÎ≥ÑÎ†•'],
        'ÏÑ±Îä•': ['79.3%', '80.6%', '79.2%', '0.876']
    }))

with tab2:
    st.subheader("Ï£ºÏöî ÏùòÌïôÏö©Ïñ¥ ÏÑ§Î™Ö")
    st.table(pd.DataFrame({
        'Ïö©Ïñ¥': ['BUN (ÌòàÏ§ë ÏöîÏÜåÏßàÏÜå)', 'eGFR (ÏÇ¨Íµ¨Ï≤¥ Ïó¨Í≥ºÏú® Ï∂îÏ†ïÏπò)', 'ACR (ÏïåÎ∂ÄÎØº/ÌÅ¨Î†àÏïÑÌã∞Îãå ÎπÑÏú®)'],
        'Í∞ÑÎã®Ìïú ÏÑ§Î™Ö': [
            'ÌòàÏï° ÏÜç ÎÖ∏ÌèêÎ¨º ÏàòÏπòÎ°ú, Ïã†Ïû• Í∏∞Îä•Ïùò Í∞ÑÏ†ë ÏßÄÌëúÏûÖÎãàÎã§.',
            'ÌòàÏ§ë ÌÅ¨Î†àÏïÑÌã∞Îãå, ÎÇòÏù¥, ÏÑ±Î≥ÑÏùÑ Ïù¥Ïö©Ìï¥ Í≥ÑÏÇ∞ÌïòÎ©∞, Ïã†Ïû•Ïù¥ ÏñºÎßàÎÇò ÏùºÏùÑ ÏûòÌïòÎäîÏßÄ Î≥¥Ïó¨Ï§çÎãàÎã§.',
            'ÏÜåÎ≥ÄÏúºÎ°ú Î∞∞Ï∂úÎêòÎäî ÏïåÎ∂ÄÎØºÏùò ÏñëÏùÑ Ï∏°Ï†ïÌïòÎ©∞, Ïã†Ïû• ÏÜêÏÉÅÏùò Ï§ëÏöîÌïú Ï°∞Í∏∞ ÏßÄÌëúÏûÖÎãàÎã§.'
        ]
    }))
